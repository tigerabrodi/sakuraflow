Directory structure:
└── /./
    ├── README.md
    ├── package.json
    ├── tsup.config.ts
    ├── .prettierrc
    ├── tsconfig.json
    ├── eslint.config.js
    ├── vitest.config.ts
    └── src/
        ├── .DS_Store
        ├── test/
        │   └── vitest.d.ts
        ├── __tests__/
        │   └── flow.test.tsx
        └── index.ts

================================================
File: /README.md
================================================
# SakuraFlow

A library to do transformations when working with generators.

## Installation

```bash
npm install @tigerabrodioss/sakuraflow
# or
pnpm add @tigerabrodioss/sakuraflow
# or
yarn add @tigerabrodioss/sakuraflow
```


================================================
File: /package.json
================================================
{
  "name": "@tigerabrodioss/sakuraflow",
  "version": "1.0.0",
  "description": "A library to do transformations when working with generators.",
  "author": "Tiger Abrodi",
  "license": "MIT",
  "type": "module",
  "main": "./dist/index.cjs",
  "module": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist"
  ],
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "https://github.com/tigerabrodi/sakuraflow"
  },
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.js",
      "require": "./dist/index.cjs"
    }
  },
  "scripts": {
    "test": "vitest",
    "build": "tsup",
    "lint": "eslint .",
    "format": "prettier --write ."
  },
  "keywords": [
    "generator",
    "transform",
    "sakuraflow"
  ],
  "packageManager": "pnpm@9.1.4",
  "devDependencies": {
    "@eslint/js": "^9.18.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@types/node": "^22.10.10",
    "@typescript-eslint/eslint-plugin": "^8.21.0",
    "@typescript-eslint/parser": "^8.21.0",
    "globals": "^15.14.0",
    "gzip-size-cli": "^5.1.0",
    "prettier": "^3.4.2",
    "tslib": "^2.8.1",
    "tsup": "^8.3.5",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.21.0",
    "vitest": "^3.0.4"
  }
}


================================================
File: /tsup.config.ts
================================================
import { defineConfig } from 'tsup'

export default defineConfig({
  entry: ['./src/index.ts'],
  format: ['cjs', 'esm'],
  dts: true,
  clean: true,
  treeshake: true,
})


================================================
File: /.prettierrc
================================================
{
  "arrowParens": "always",
  "bracketSpacing": true,
  "embeddedLanguageFormatting": "auto",
  "htmlWhitespaceSensitivity": "css",
  "insertPragma": false,
  "printWidth": 80,
  "proseWrap": "preserve",
  "quoteProps": "as-needed",
  "requirePragma": false,
  "semi": false,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "useTabs": false,
  "vueIndentScriptAndStyle": false
}


================================================
File: /tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "lib": ["ESNext", "DOM"],
    "moduleResolution": "bundler",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true
  },
  "include": [
    "src",
    "tsup.config.ts",
    "vitest.config.ts",
    "src/test/vitest.d.ts"
  ]
}


================================================
File: /eslint.config.js
================================================
import js from '@eslint/js'
import globals from 'globals'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [
      js.configs.recommended,
      ...tseslint.configs.recommendedTypeChecked,
    ],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        project: ['./tsconfig.json'],
        tsconfigRootDir: import.meta.dirname,
      },
    },
    rules: {
      'no-await-in-loop': 'error',
      '@typescript-eslint/array-type': ['error', { default: 'generic' }],
      '@typescript-eslint/naming-convention': [
        'error',
        {
          selector: 'variable',
          types: ['boolean'],
          format: ['PascalCase'],
          prefix: ['is', 'should', 'has', 'are', 'can', 'was'],
        },
      ],
    },
  }
)


================================================
File: /vitest.config.ts
================================================
import { defineConfig } from 'vitest/config'

export default defineConfig({
  test: {
    globals: true,
  },
})


================================================
File: /src/test/vitest.d.ts
================================================
/// <reference types="vitest/globals" />


================================================
File: /src/__tests__/flow.test.tsx
================================================
it('works with generators', () => {})


================================================
File: /src/index.ts
================================================
// dummy

export function log(message: string) {
  console.log(message)
}


